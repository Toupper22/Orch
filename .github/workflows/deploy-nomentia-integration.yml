name: Deploy Nomentia Integration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - test
          - uat
          - prod
      whatIf:
        description: 'Run what-if deployment (preview changes without deploying)'
        required: false
        type: boolean
        default: false
      deployInfrastructure:
        description: 'Deploy infrastructure (Function App, Storage, Service Bus, etc.)'
        required: false
        type: boolean
        default: true
      deployFunctionApp:
        description: 'Deploy Function App code'
        required: false
        type: boolean
        default: true
      deployLogicApps:
        description: 'Deploy Logic Apps workflows'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

# NOTE: Integration parameter files are committed to git and NOT auto-generated
# This preserves custom configurations specific to each integration
# Parameter files are located at: bicep/integrations/nomentia/parameters.*.json

jobs:
  build-function-app:
    name: 📦 Build Function App
    runs-on: ubuntu-latest
    if: ${{ inputs.deployFunctionApp == true && inputs.whatIf == false }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup NuGet Authentication
        run: |
          dotnet nuget update source EfimaLayerFeed \
            --username ${{ github.actor }} \
            --password ${{ secrets.EFIMA_FEED_PAT }} \
            --store-password-in-clear-text

      - name: Build Function App
        run: |
          cd src/Efima.IL.Nomentia
          dotnet restore
          dotnet build --configuration Release
          dotnet publish --configuration Release --output ./publish

      - name: Verify .azurefunctions Folder Exists
        run: |
          if [ -d "src/Efima.IL.Nomentia/publish/.azurefunctions" ]; then
            echo "✅ .azurefunctions folder found in publish output"
            ls -la src/Efima.IL.Nomentia/publish/.azurefunctions/
          else
            echo "❌ ERROR: .azurefunctions folder NOT found in publish output"
            echo "This will cause deployment to fail. Check .csproj configuration."
            exit 1
          fi

      - name: Upload Function App Package
        uses: actions/upload-artifact@v4
        with:
          name: function-app-package
          path: src/Efima.IL.Nomentia/publish
          include-hidden-files: true

  validate:
    name: ✅ Validate Bicep Templates
    runs-on: ubuntu-latest
    if: ${{ inputs.deployInfrastructure == true }}
    environment: ${{ inputs.environment }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🌐 Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: Validate Bicep template
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/standardIntegration.bicep
          parameters: ./bicep/integrations/nomentia/parameters.${{ inputs.environment }}.json
          deploymentMode: Validate

  preview:
    name: 🔍 Preview Changes (What-If)
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ inputs.whatIf == true }}
    environment: ${{ inputs.environment }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🌐 Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: Run What-If Analysis
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/standardIntegration.bicep
          parameters: ./bicep/integrations/nomentia/parameters.${{ inputs.environment }}.json
          additionalArguments: --what-if

  deploy:
    name: 🚀 Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate, build-function-app]
    if: |
      always() &&
      inputs.whatIf == false &&
      (inputs.deployInfrastructure == true || inputs.deployFunctionApp == true) &&
      (needs.validate.result == 'success' || needs.validate.result == 'skipped') &&
      (needs.build-function-app.result == 'success' || needs.build-function-app.result == 'skipped')
    environment: ${{ inputs.environment }}
    outputs:
      resourceGroupName: ${{ steps.deploy.outputs.resourceGroupName }}
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: Download Function App Package
        if: ${{ inputs.deployFunctionApp == true }}
        uses: actions/download-artifact@v4
        with:
          name: function-app-package
          path: function-app-package

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🌐 Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: 🏗️ Deploy Infrastructure
        id: deploy
        if: ${{ inputs.deployInfrastructure == true }}
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/standardIntegration.bicep
          parameters: ./bicep/integrations/nomentia/parameters.${{ inputs.environment }}.json
          deploymentName: nomentia-integration-${{ inputs.environment }}-${{ github.run_number }}
          failOnStdErr: false

      - name: Get Existing Deployment Info
        id: existing
        if: ${{ inputs.deployInfrastructure == false && inputs.deployFunctionApp == true }}
        run: |
          # When infrastructure deployment is skipped, get resource names from parameters file
          PREFIX=$(jq -r '.parameters.prefix.value' bicep/integrations/nomentia/parameters.${{ inputs.environment }}.json)
          LOCATION_SHORT=$(jq -r '.parameters.locationShort.value' bicep/integrations/nomentia/parameters.${{ inputs.environment }}.json)
          ENV="${{ inputs.environment }}"

          # Match the naming convention from main.bicep
          RESOURCE_GROUP="${PREFIX}-${ENV}-nomentia-rg"
          FUNCTION_APP="${PREFIX}-${ENV}-${LOCATION_SHORT}-nomentia-func"

          echo "resourceGroupName=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "functionAppName=$FUNCTION_APP" >> $GITHUB_OUTPUT

          echo "📋 Using existing deployment:"
          echo "   Resource Group: $RESOURCE_GROUP"
          echo "   Function App: $FUNCTION_APP"

      - name: Temporarily Allow Public Access to Function Storage
        if: ${{ inputs.deployFunctionApp == true && inputs.deployInfrastructure == true }}
        run: |
          FUNCTION_STORAGE_NAME="${{ steps.deploy.outputs.functionStorageName }}"
          RESOURCE_GROUP="${{ steps.deploy.outputs.resourceGroupName }}"

          echo "Temporarily allowing public network access to $FUNCTION_STORAGE_NAME..."
          az storage account update \
            --name $FUNCTION_STORAGE_NAME \
            --resource-group $RESOURCE_GROUP \
            --default-action Allow

          echo "✅ Public access temporarily enabled for initial startup"

      - name: Restart Function App to Initialize with Storage Access
        if: ${{ inputs.deployFunctionApp == true && inputs.deployInfrastructure == true }}
        run: |
          FUNCTION_APP_NAME="${{ steps.deploy.outputs.functionAppName }}"
          RESOURCE_GROUP="${{ steps.deploy.outputs.resourceGroupName }}"

          echo "Restarting Function App to initialize with storage access..."
          az functionapp restart \
            --name $FUNCTION_APP_NAME \
            --resource-group $RESOURCE_GROUP

          echo "Waiting 60 seconds for restart to complete..."
          sleep 60

      - name: Wait for Function App to be Ready
        if: ${{ inputs.deployFunctionApp == true && inputs.deployInfrastructure == true }}
        run: |
          FUNCTION_APP_NAME="${{ steps.deploy.outputs.functionAppName }}"
          RESOURCE_GROUP="${{ steps.deploy.outputs.resourceGroupName }}"
          echo "Waiting for Function App to be ready: $FUNCTION_APP_NAME"

          # Wait up to 10 minutes for Function App to be ready
          for i in {1..60}; do
            STATUS=$(az functionapp show --name $FUNCTION_APP_NAME --resource-group $RESOURCE_GROUP --query "state" -o tsv 2>&1)
            echo "Function App status: $STATUS (attempt $i/60)"

            if [ "$STATUS" = "Running" ]; then
              echo "✅ Function App is running, checking runtime status..."

              # Try to get the runtime status to ensure it's fully initialized
              RUNTIME_STATUS=$(az functionapp config show --name $FUNCTION_APP_NAME --resource-group $RESOURCE_GROUP --query "netFrameworkVersion" -o tsv 2>&1 || echo "checking")
              echo "Runtime check: $RUNTIME_STATUS"

              sleep 30
              echo "✅ Function App is ready"
              break
            fi

            if [ $i -eq 60 ]; then
              echo "❌ Function App not ready after 10 minutes"
              exit 1
            fi

            sleep 10
          done

      - name: Deploy Function App Code
        if: ${{ inputs.deployFunctionApp == true }}
        run: |
          # Use outputs from either infrastructure deployment or existing deployment
          FUNCTION_APP_NAME="${{ steps.deploy.outputs.functionAppName || steps.existing.outputs.functionAppName }}"
          RESOURCE_GROUP="${{ steps.deploy.outputs.resourceGroupName || steps.existing.outputs.resourceGroupName }}"
          echo "Deploying to Function App: $FUNCTION_APP_NAME"

          # Verify function-app-package directory exists
          if [ ! -d "function-app-package" ]; then
            echo "❌ ERROR: function-app-package directory not found!"
            echo "This means the artifact download step was skipped or failed."
            exit 1
          fi

          echo "📦 Creating deployment package..."
          cd function-app-package

          # Include hidden files (.azurefunctions folder) in zip
          shopt -s dotglob
          zip -r ../function-app.zip *
          shopt -u dotglob
          cd ..

          echo "✅ Deployment package created: $(ls -lh function-app.zip | awk '{print $5}')"

          echo "🔍 Verifying .azurefunctions folder is in the zip..."
          if unzip -l function-app.zip | grep -q ".azurefunctions"; then
            echo "✅ .azurefunctions folder found in zip"
            unzip -l function-app.zip | grep ".azurefunctions" | head -5
          else
            echo "❌ ERROR: .azurefunctions folder NOT found in zip!"
            echo "Deployment will fail. Aborting."
            exit 1
          fi

          # Try zip deployment with retries
          echo ""
          echo "🚀 Starting zip deployment to Azure..."
          echo "   Function App: $FUNCTION_APP_NAME"
          echo "   Resource Group: $RESOURCE_GROUP"
          echo "   Package Size: $(ls -lh function-app.zip | awk '{print $5}')"
          echo ""

          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "📤 Deployment attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."

            if az functionapp deployment source config-zip \
              --resource-group $RESOURCE_GROUP \
              --name $FUNCTION_APP_NAME \
              --src function-app.zip \
              --timeout 600; then
              SUCCESS=true
              echo "✅ Zip deployment successful!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((30 * RETRY_COUNT))
                echo "⚠️ Deployment attempt $RETRY_COUNT failed, waiting ${WAIT_TIME}s before retry..."
                sleep $WAIT_TIME
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "❌ All $MAX_RETRIES zip deployment attempts failed!"
            echo "Trying alternative deployment method using Azure Functions Core Tools..."
            echo ""

            # Alternative: Use Functions Core Tools with explicit runtime
            npm install -g azure-functions-core-tools@4 --unsafe-perm true

            # Deploy using Core Tools with explicit .NET isolated runtime flag
            cd function-app-package
            echo "Deploying with Azure Functions Core Tools (dotnet-isolated runtime)..."
            func azure functionapp publish $FUNCTION_APP_NAME --dotnet-isolated

            echo "✅ Deployment successful via Functions Core Tools"
          fi

      - name: Re-enable Network Restrictions on Function Storage
        if: ${{ always() && inputs.deployFunctionApp == true && inputs.deployInfrastructure == true }}
        run: |
          FUNCTION_STORAGE_NAME="${{ steps.deploy.outputs.functionStorageName }}"
          RESOURCE_GROUP="${{ steps.deploy.outputs.resourceGroupName }}"

          echo "Re-enabling network restrictions on $FUNCTION_STORAGE_NAME..."
          az storage account update \
            --name $FUNCTION_STORAGE_NAME \
            --resource-group $RESOURCE_GROUP \
            --default-action Deny

          echo "✅ Network restrictions re-enabled"

      - name: Verify Function App Health
        if: ${{ inputs.deployFunctionApp == true }}
        run: |
          # Use outputs from either infrastructure deployment or existing deployment
          FUNCTION_APP_NAME="${{ steps.deploy.outputs.functionAppName || steps.existing.outputs.functionAppName }}"
          RESOURCE_GROUP="${{ steps.deploy.outputs.resourceGroupName || steps.existing.outputs.resourceGroupName }}"

          echo "Checking Function App health after deployment..."

          # Get the function app URL
          FUNCTION_URL=$(az functionapp show \
            --name $FUNCTION_APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --query "defaultHostName" -o tsv)

          echo "Function App URL: https://$FUNCTION_URL"

          # Wait a bit for the app to settle after deployment
          echo "Waiting 30 seconds for functions to initialize..."
          sleep 30

          # Try to ping the function app (it should return 200 or 401/403, not 503)
          echo "Checking if Function App is responding..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$FUNCTION_URL" || echo "000")
          echo "HTTP response code: $HTTP_CODE"

          if [ "$HTTP_CODE" = "503" ]; then
            echo "⚠️ Warning: Function App returning 503 - may need manual restart"
          else
            echo "✅ Function App is responding (HTTP $HTTP_CODE)"
          fi

      - name: Output Deployment Results
        run: |
          echo "## Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Name:** nomentia-integration-${{ inputs.environment }}-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ steps.deploy.outputs.resourceGroupName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Service Bus:** ${{ steps.deploy.outputs.serviceBusName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function App:** ${{ steps.deploy.outputs.functionAppName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function Storage:** ${{ steps.deploy.outputs.functionStorageName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Integration Storage:** ${{ steps.deploy.outputs.integrationStorageName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Key Vault:** ${{ steps.deploy.outputs.integrationKeyVaultName }}" >> $GITHUB_STEP_SUMMARY

      - name: 🚪 Azure Logout
        if: always()
        run: az logout

  deploy-logic-apps:
    name: 🔄 Deploy Logic Apps
    runs-on: ubuntu-latest
    needs: [deploy]
    if: |
      always() &&
      inputs.whatIf == false &&
      inputs.deployLogicApps == true &&
      (needs.deploy.result == 'success' || needs.deploy.result == 'skipped')
    environment: ${{ inputs.environment }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🔐 Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🌐 Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: Load Deployment Parameters
        id: load_params
        run: |
          PARAMS=$(jq -c '{prefix: .parameters.prefix.value, locationShort: .parameters.locationShort.value}' bicep/integrations/nomentia/parameters.${{ inputs.environment }}.json)
          echo "params=$PARAMS" >> $GITHUB_OUTPUT

      - name: Load Workflow Definition - D365FO to Nomentia AR Transactions
        id: load_artransactions
        run: |
          if [ -f "src/Efima.IL.Nomentia/LogicApps/d365fo-nomentia-artransactions/workflow.json" ]; then
            WORKFLOW=$(cat src/Efima.IL.Nomentia/LogicApps/d365fo-nomentia-artransactions/workflow.json | jq -c)
            echo "workflow<<EOF" >> $GITHUB_OUTPUT
            echo "$WORKFLOW" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Workflow definition not found, skipping"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy D365FO to Nomentia AR Transactions Logic App
        if: steps.load_artransactions.outputs.exists == 'true'
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/singleWorkflow.bicep
          parameters: >
            prefix=${{ fromJson(steps.load_params.outputs.params).prefix }}
            environment=${{ inputs.environment }}
            location=swedencentral
            locationShort=${{ fromJson(steps.load_params.outputs.params).locationShort }}
            integrationName=nomentia
            workflowName=d365fo-nomentia-artransactions
            workflowDefinition='${{ steps.load_artransactions.outputs.workflow }}'
          deploymentName: nomentia-artransactions-${{ inputs.environment }}-${{ github.run_number }}

      - name: Load Workflow Definition - ERP to Nomentia Outbound Payments
        id: load_outboundpayments
        run: |
          if [ -f "src/Efima.IL.Nomentia/LogicApps/erp-nomentia-outboundpayments/workflow.json" ]; then
            WORKFLOW=$(cat src/Efima.IL.Nomentia/LogicApps/erp-nomentia-outboundpayments/workflow.json | jq -c)
            echo "workflow<<EOF" >> $GITHUB_OUTPUT
            echo "$WORKFLOW" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Workflow definition not found, skipping"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy ERP to Nomentia Outbound Payments Logic App
        if: steps.load_outboundpayments.outputs.exists == 'true'
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/singleWorkflow.bicep
          parameters: >
            prefix=${{ fromJson(steps.load_params.outputs.params).prefix }}
            environment=${{ inputs.environment }}
            location=swedencentral
            locationShort=${{ fromJson(steps.load_params.outputs.params).locationShort }}
            integrationName=nomentia
            workflowName=erp-nomentia-outboundpayments
            workflowDefinition='${{ steps.load_outboundpayments.outputs.workflow }}'
          deploymentName: nomentia-outboundpayments-${{ inputs.environment }}-${{ github.run_number }}

      - name: Load Workflow Definition - Nomentia to D365FO Posted Bank Statements
        id: load_bankstatements
        run: |
          if [ -f "src/Efima.IL.Nomentia/LogicApps/nomentia-d365fo-postedbankstatements/workflow.json" ]; then
            WORKFLOW=$(cat src/Efima.IL.Nomentia/LogicApps/nomentia-d365fo-postedbankstatements/workflow.json | jq -c)
            echo "workflow<<EOF" >> $GITHUB_OUTPUT
            echo "$WORKFLOW" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Workflow definition not found, skipping"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Nomentia to D365FO Posted Bank Statements Logic App
        if: steps.load_bankstatements.outputs.exists == 'true'
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/singleWorkflow.bicep
          parameters: >
            prefix=${{ fromJson(steps.load_params.outputs.params).prefix }}
            environment=${{ inputs.environment }}
            location=swedencentral
            locationShort=${{ fromJson(steps.load_params.outputs.params).locationShort }}
            integrationName=nomentia
            workflowName=nomentia-d365fo-postedbankstatements
            workflowDefinition='${{ steps.load_bankstatements.outputs.workflow }}'
          deploymentName: nomentia-bankstatements-${{ inputs.environment }}-${{ github.run_number }}

      - name: Load Workflow Definition - Nomentia to ERP Reference Payments
        id: load_referencepayments
        run: |
          if [ -f "src/Efima.IL.Nomentia/LogicApps/nomentia-erp-referencepayments/workflow.json" ]; then
            WORKFLOW=$(cat src/Efima.IL.Nomentia/LogicApps/nomentia-erp-referencepayments/workflow.json | jq -c)
            echo "workflow<<EOF" >> $GITHUB_OUTPUT
            echo "$WORKFLOW" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Workflow definition not found, skipping"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Nomentia to ERP Reference Payments Logic App
        if: steps.load_referencepayments.outputs.exists == 'true'
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/singleWorkflow.bicep
          parameters: >
            prefix=${{ fromJson(steps.load_params.outputs.params).prefix }}
            environment=${{ inputs.environment }}
            location=swedencentral
            locationShort=${{ fromJson(steps.load_params.outputs.params).locationShort }}
            integrationName=nomentia
            workflowName=nomentia-erp-referencepayments
            workflowDefinition='${{ steps.load_referencepayments.outputs.workflow }}'
          deploymentName: nomentia-referencepayments-${{ inputs.environment }}-${{ github.run_number }}

      - name: Output Logic Apps Deployment Summary
        run: |
          echo "## Logic Apps Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Logic Apps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.load_artransactions.outputs.exists }}" == "true" ]; then
            echo "- ✅ D365FO to Nomentia AR Transactions" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ D365FO to Nomentia AR Transactions (workflow.json not found)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.load_outboundpayments.outputs.exists }}" == "true" ]; then
            echo "- ✅ ERP to Nomentia Outbound Payments" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ ERP to Nomentia Outbound Payments (workflow.json not found)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.load_bankstatements.outputs.exists }}" == "true" ]; then
            echo "- ✅ Nomentia to D365FO Posted Bank Statements" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Nomentia to D365FO Posted Bank Statements (workflow.json not found)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.load_referencepayments.outputs.exists }}" == "true" ]; then
            echo "- ✅ Nomentia to ERP Reference Payments" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Nomentia to ERP Reference Payments (workflow.json not found)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🚪 Azure Logout
        if: always()
        run: az logout
