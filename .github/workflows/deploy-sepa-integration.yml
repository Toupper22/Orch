name: Deploy SEPA Integration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - test
          - uat
          - prod
      whatIf:
        description: 'Run what-if deployment (preview changes without deploying)'
        required: false
        type: boolean
        default: false
      deployInfrastructure:
        description: 'Deploy infrastructure (Function App, Storage, Service Bus, etc.)'
        required: false
        type: boolean
        default: true
      deployFunctionApp:
        description: 'Deploy Function App code'
        required: false
        type: boolean
        default: true
      deployLogicApps:
        description: 'Deploy Logic Apps workflows'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

# NOTE: Integration parameter files are committed to git and NOT auto-generated
# This preserves custom configurations specific to each integration
# Parameter files are located at: bicep/integrations/sepa/parameters.*.json

jobs:
  build-function-app:
    name: üì¶ Build Function App
    runs-on: ubuntu-latest
    if: ${{ inputs.deployFunctionApp == true && inputs.whatIf == false }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üîê Setup NuGet Authentication
        run: |
          dotnet nuget update source EfimaLayerFeed \
            --username ${{ github.actor }} \
            --password ${{ secrets.EFIMA_FEED_PAT }} \
            --store-password-in-clear-text

      - name: üèóÔ∏è Build Function App
        run: |
          cd src/Sepa/functionApp
          dotnet restore
          dotnet build --configuration Release
          dotnet publish --configuration Release --output ./publish

      - name: üîç Verify .azurefunctions Folder Exists
        run: |
          if [ -d "src/Sepa/functionApp/publish/.azurefunctions" ]; then
            echo "‚úÖ .azurefunctions folder found in publish output"
            ls -la src/Sepa/functionApp/publish/.azurefunctions/
          else
            echo "‚ùå ERROR: .azurefunctions folder NOT found in publish output"
            echo "This will cause deployment to fail. Check .csproj configuration."
            exit 1
          fi

      - name: üì§ Upload Function App Package
        uses: actions/upload-artifact@v4
        with:
          name: function-app-package
          path: src/Sepa/functionApp/publish
          include-hidden-files: true

  validate:
    name: ‚úÖ Validate Bicep Templates
    runs-on: ubuntu-latest
    if: ${{ inputs.deployInfrastructure == true }}
    environment: ${{ inputs.environment }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üåê Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: ‚úÖ Validate Bicep template
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/standardIntegration.bicep
          parameters: ./bicep/integrations/sepa/parameters.${{ inputs.environment }}.json
          deploymentMode: Validate

  preview:
    name: üîç Preview Changes (What-If)
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ inputs.whatIf == true }}
    environment: ${{ inputs.environment }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üåê Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: üîç Run What-If Analysis
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/standardIntegration.bicep
          parameters: ./bicep/integrations/sepa/parameters.${{ inputs.environment }}.json
          additionalArguments: --what-if

  deploy:
    name: üöÄ Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate, build-function-app]
    if: |
      always() &&
      inputs.whatIf == false &&
      (inputs.deployInfrastructure == true || inputs.deployFunctionApp == true) &&
      (needs.validate.result == 'success' || needs.validate.result == 'skipped') &&
      (needs.build-function-app.result == 'success' || needs.build-function-app.result == 'skipped')
    environment: ${{ inputs.environment }}
    outputs:
      resourceGroupName: ${{ steps.deploy.outputs.resourceGroupName }}
      functionAppName: ${{ steps.deploy.outputs.functionAppName }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì• Download Function App Package
        if: ${{ inputs.deployFunctionApp == true }}
        uses: actions/download-artifact@v4
        with:
          name: function-app-package
          path: function-app-package

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üåê Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: üèóÔ∏è Deploy Infrastructure
        id: deploy
        if: ${{ inputs.deployInfrastructure == true }}
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: swedencentral
          template: ./bicep/modules/standardIntegration.bicep
          parameters: ./bicep/integrations/sepa/parameters.${{ inputs.environment }}.json
          deploymentName: sepa-integration-${{ inputs.environment }}-${{ github.run_number }}
          failOnStdErr: false

      - name: Debug Deployment Outputs
        if: ${{ inputs.deployInfrastructure == true }}
        run: |
          echo "üìã Deployment Outputs:"
          echo "  blobApiConnectionId: ${{ steps.deploy.outputs.blobApiConnectionId }}"
          echo "  blobApiConnectionName: ${{ steps.deploy.outputs.blobApiConnectionName }}"
          echo "  tableApiConnectionId: ${{ steps.deploy.outputs.tableApiConnectionId }}"
          echo "  tableApiConnectionName: ${{ steps.deploy.outputs.tableApiConnectionName }}"

      - name: üìã Get Existing Deployment Info
        id: existing
        if: ${{ inputs.deployInfrastructure == false && inputs.deployFunctionApp == true }}
        run: |
          # When infrastructure deployment is skipped, get resource names from parameters file
          PREFIX=$(jq -r '.parameters.prefix.value' bicep/integrations/sepa/parameters.${{ inputs.environment }}.json)
          LOCATION_SHORT=$(jq -r '.parameters.locationShort.value' bicep/integrations/sepa/parameters.${{ inputs.environment }}.json)
          ENV="${{ inputs.environment }}"

          # Match the naming convention from main.bicep
          RESOURCE_GROUP="${PREFIX}-${ENV}-sepa-rg"
          FUNCTION_APP="${PREFIX}-${ENV}-${LOCATION_SHORT}-sepa-func"

          echo "resourceGroupName=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "functionAppName=$FUNCTION_APP" >> $GITHUB_OUTPUT

          echo "üìã Using existing deployment:"
          echo "   Resource Group: $RESOURCE_GROUP"
          echo "   Function App: $FUNCTION_APP"

      - name: Deploy Function App Code
        if: ${{ inputs.deployFunctionApp == true }}
        run: |
          # Use outputs from either infrastructure deployment or existing deployment
          FUNCTION_APP_NAME="${{ steps.deploy.outputs.functionAppName || steps.existing.outputs.functionAppName }}"
          RESOURCE_GROUP="${{ steps.deploy.outputs.resourceGroupName || steps.existing.outputs.resourceGroupName }}"
          echo "Deploying to Function App: $FUNCTION_APP_NAME"

          # Verify function-app-package directory exists
          if [ ! -d "function-app-package" ]; then
            echo "‚ùå ERROR: function-app-package directory not found!"
            echo "This means the artifact download step was skipped or failed."
            exit 1
          fi

          echo "üì¶ Creating deployment package..."
          cd function-app-package

          # Include hidden files (.azurefunctions folder) in zip
          shopt -s dotglob
          zip -r ../function-app.zip *
          shopt -u dotglob
          cd ..

          echo "‚úÖ Deployment package created: $(ls -lh function-app.zip | awk '{print $5}')"

          echo "üîç Verifying .azurefunctions folder is in the zip..."
          if unzip -l function-app.zip | grep -q ".azurefunctions"; then
            echo "‚úÖ .azurefunctions folder found in zip"
            unzip -l function-app.zip | grep ".azurefunctions" | head -5
          else
            echo "‚ùå ERROR: .azurefunctions folder NOT found in zip!"
            echo "Deployment will fail. Aborting."
            exit 1
          fi

          # Try zip deployment with retries
          echo ""
          echo "üöÄ Starting zip deployment to Azure..."
          echo "   Function App: $FUNCTION_APP_NAME"
          echo "   Resource Group: $RESOURCE_GROUP"
          echo "   Package Size: $(ls -lh function-app.zip | awk '{print $5}')"
          echo ""

          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üì§ Deployment attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."

            if az functionapp deployment source config-zip \
              --resource-group $RESOURCE_GROUP \
              --name $FUNCTION_APP_NAME \
              --src function-app.zip \
              --timeout 600; then
              SUCCESS=true
              echo "‚úÖ Zip deployment successful!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((30 * RETRY_COUNT))
                echo "‚ö†Ô∏è Deployment attempt $RETRY_COUNT failed, waiting ${WAIT_TIME}s before retry..."
                sleep $WAIT_TIME
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "‚ùå All $MAX_RETRIES zip deployment attempts failed!"
            echo "Trying alternative deployment method using Azure Functions Core Tools..."
            echo ""

            # Alternative: Use Functions Core Tools with explicit runtime
            npm install -g azure-functions-core-tools@4 --unsafe-perm true

            # Deploy using Core Tools with explicit .NET isolated runtime flag
            cd function-app-package
            echo "Deploying with Azure Functions Core Tools (dotnet-isolated runtime)..."
            func azure functionapp publish $FUNCTION_APP_NAME --dotnet-isolated

            echo "‚úÖ Deployment successful via Functions Core Tools"
          fi

      - name: üìä Output Deployment Results
        run: |
          echo "## Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Name:** sepa-integration-${{ inputs.environment }}-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ steps.deploy.outputs.resourceGroupName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Service Bus:** ${{ steps.deploy.outputs.serviceBusName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function App:** ${{ steps.deploy.outputs.functionAppName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function Storage:** ${{ steps.deploy.outputs.functionStorageName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Archive Storage:** ${{ steps.deploy.outputs.archiveStorageName }}" >> $GITHUB_STEP_SUMMARY
          echo "**Key Vault:** ${{ steps.deploy.outputs.integrationKeyVaultName }}" >> $GITHUB_STEP_SUMMARY

      - name: üö™ Azure Logout
        if: always()
        run: az logout

  deploy-logic-apps:
    name: üîÑ Deploy Logic Apps
    runs-on: ubuntu-latest
    needs: [deploy]
    if: |
      always() &&
      inputs.whatIf == false &&
      inputs.deployLogicApps == true &&
      (needs.deploy.result == 'success' || needs.deploy.result == 'skipped')
    environment: ${{ inputs.environment }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üåê Set Azure Subscription
        run: |
          SUBSCRIPTION_ID=$(jq -r '.subscriptions.${{ inputs.environment }}.subscriptionId' config/subscriptions.json)
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: üìã Load Deployment Parameters
        id: load_params
        run: |
          PARAMS=$(jq -c '{prefix: .parameters.prefix.value, locationShort: .parameters.locationShort.value}' bicep/integrations/sepa/parameters.${{ inputs.environment }}.json)
          echo "params=$PARAMS" >> $GITHUB_OUTPUT

      - name: üîó Construct API Connection IDs
        id: get_connections
        run: |
          PREFIX=$(jq -r '.prefix' <<< '${{ steps.load_params.outputs.params }}')
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          RESOURCE_GROUP="${PREFIX}-${{ inputs.environment }}-sepa-rg"

          # Construct API Connection resource IDs using naming convention
          BLOB_CONN_NAME="${PREFIX}-${{ inputs.environment }}-sepa-blob-conn"
          BLOB_CONN_ID="/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.Web/connections/${BLOB_CONN_NAME}"

          TABLE_CONN_NAME="${PREFIX}-${{ inputs.environment }}-sepa-table-conn"
          TABLE_CONN_ID="/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP}/providers/Microsoft.Web/connections/${TABLE_CONN_NAME}"

          echo "blobApiConnectionId=$BLOB_CONN_ID" >> $GITHUB_OUTPUT
          echo "blobApiConnectionName=$BLOB_CONN_NAME" >> $GITHUB_OUTPUT
          echo "tableApiConnectionId=$TABLE_CONN_ID" >> $GITHUB_OUTPUT
          echo "tableApiConnectionName=$TABLE_CONN_NAME" >> $GITHUB_OUTPUT

          echo "üìã Constructed API Connection IDs:"
          echo "   Blob: $BLOB_CONN_NAME"
          echo "        $BLOB_CONN_ID"
          echo "   Table: $TABLE_CONN_NAME"
          echo "        $TABLE_CONN_ID"

      - name: üîó Get Function App URL
        id: get_function_url
        run: |
          PREFIX=$(jq -r '.prefix' <<< '${{ steps.load_params.outputs.params }}')
          LOCATION_SHORT=$(jq -r '.locationShort' <<< '${{ steps.load_params.outputs.params }}')
          FUNCTION_APP_NAME="${PREFIX}-${{ inputs.environment }}-${LOCATION_SHORT}-sepa-func"
          FUNCTION_URL=$(az functionapp show --name "$FUNCTION_APP_NAME" --resource-group "${PREFIX}-${{ inputs.environment }}-sepa-rg" --query "defaultHostName" -o tsv)
          echo "functionUrl=https://${FUNCTION_URL}" >> $GITHUB_OUTPUT

      - name: üöÄ Deploy SEPA Process Logic App
        id: deploy_process
        run: |
          if [ ! -f "src/Sepa/logicapps/sepa-process/workflow.json" ]; then
            echo "‚ö†Ô∏è Workflow definition not found, skipping"
            exit 0
          fi

          PREFIX=$(jq -r '.prefix' <<< '${{ steps.load_params.outputs.params }}')
          LOCATION_SHORT=$(jq -r '.locationShort' <<< '${{ steps.load_params.outputs.params }}')

          # Create parameters file with workflow definition and function URL
          cat > /tmp/process-params.json <<EOF
          {
            "\$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "prefix": { "value": "$PREFIX" },
              "environment": { "value": "${{ inputs.environment }}" },
              "location": { "value": "swedencentral" },
              "locationShort": { "value": "$LOCATION_SHORT" },
              "integrationName": { "value": "sepa" },
              "workflowName": { "value": "sepa-process" },
              "workflowDefinition": { "value": $(cat src/Sepa/logicapps/sepa-process/workflow.json) },
              "workflowParameters": {
                "value": {
                  "functionAppUrl": {
                    "value": "${{ steps.get_function_url.outputs.functionUrl }}"
                  }
                }
              }
            }
          }
          EOF

          DEPLOYMENT_OUTPUT=$(az deployment sub create \
            --location swedencentral \
            --template-file bicep/modules/singleWorkflow.bicep \
            --parameters /tmp/process-params.json \
            --name sepa-process-${{ inputs.environment }}-${{ github.run_number }} \
            --query "properties.outputs.logicAppId.value" -o tsv)

          echo "logicAppId=$DEPLOYMENT_OUTPUT" >> $GITHUB_OUTPUT

      - name: üöÄ Deploy SEPA Handler Logic App
        id: deploy_handler
        run: |
          if [ ! -f "src/Sepa/logicapps/sepa-handler/workflow.json" ]; then
            echo "‚ö†Ô∏è Workflow definition not found, skipping"
            exit 0
          fi

          PREFIX=$(jq -r '.prefix' <<< '${{ steps.load_params.outputs.params }}')
          LOCATION_SHORT=$(jq -r '.locationShort' <<< '${{ steps.load_params.outputs.params }}')
          PROCESS_LOGIC_APP_ID="${{ steps.deploy_process.outputs.logicAppId }}"

          # Get API Connection IDs from the construction step
          BLOB_CONN_ID="${{ steps.get_connections.outputs.blobApiConnectionId }}"
          TABLE_CONN_ID="${{ steps.get_connections.outputs.tableApiConnectionId }}"
          BLOB_CONN_NAME="${{ steps.get_connections.outputs.blobApiConnectionName }}"
          TABLE_CONN_NAME="${{ steps.get_connections.outputs.tableApiConnectionName }}"

          # Get current subscription ID
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)

          echo "‚úÖ Using API Connections:"
          echo "  Blob: $BLOB_CONN_NAME"
          echo "        $BLOB_CONN_ID"
          echo "  Table: $TABLE_CONN_NAME"
          echo "        $TABLE_CONN_ID"

          # Inject the actual resource ID into the workflow definition
          # Replace @parameters('processLogicAppId') with the actual resource ID
          WORKFLOW_DEF=$(cat src/Sepa/logicapps/sepa-handler/workflow.json | jq --arg id "$PROCESS_LOGIC_APP_ID" '
            # Remove the processLogicAppId parameter from definition
            del(.parameters.processLogicAppId) |
            # Replace the parameter reference with the actual resource ID and add triggerName
            .actions.Call_Process_Logic_App.inputs.host.workflow.id = $id |
            .actions.Call_Process_Logic_App.inputs.host.triggerName = "manual"
          ')

          # Debug: Show what we're about to use
          echo "üîç Values before creating JSON:"
          echo "  BLOB_CONN_ID length: ${#BLOB_CONN_ID}"
          echo "  BLOB_CONN_ID: $BLOB_CONN_ID"
          echo "  TABLE_CONN_ID length: ${#TABLE_CONN_ID}"
          echo "  TABLE_CONN_ID: $TABLE_CONN_ID"

          # Create parameters file with modified workflow definition and API connections
          cat > /tmp/handler-params.json <<EOF
          {
            "\$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "prefix": { "value": "$PREFIX" },
              "environment": { "value": "${{ inputs.environment }}" },
              "location": { "value": "swedencentral" },
              "locationShort": { "value": "$LOCATION_SHORT" },
              "integrationName": { "value": "sepa" },
              "workflowName": { "value": "sepa-handler" },
              "workflowDefinition": { "value": $WORKFLOW_DEF },
              "workflowParameters": { "value": {} },
              "connections": {
                "value": {
                  "azureblob": {
                    "connectionId": "$BLOB_CONN_ID",
                    "connectionName": "$BLOB_CONN_NAME",
                    "id": "/subscriptions/$SUBSCRIPTION_ID/providers/Microsoft.Web/locations/swedencentral/managedApis/azureblob"
                  },
                  "azuretables": {
                    "connectionId": "$TABLE_CONN_ID",
                    "connectionName": "$TABLE_CONN_NAME",
                    "id": "/subscriptions/$SUBSCRIPTION_ID/providers/Microsoft.Web/locations/swedencentral/managedApis/azuretables"
                  }
                }
              }
            }
          }
          EOF

          # Debug: Show what was actually written
          echo "üîç Generated parameters file:"
          cat /tmp/handler-params.json | jq '.parameters.connections.value.azureblob'
          cat /tmp/handler-params.json | jq '.parameters.connections.value.azuretables'

          DEPLOYMENT_OUTPUT=$(az deployment sub create \
            --location swedencentral \
            --template-file bicep/modules/singleWorkflow.bicep \
            --parameters /tmp/handler-params.json \
            --name sepa-handler-${{ inputs.environment }}-${{ github.run_number }} \
            --query "properties.outputs.logicAppId.value" -o tsv)

          echo "logicAppId=$DEPLOYMENT_OUTPUT" >> $GITHUB_OUTPUT

      - name: üöÄ Deploy SEPA Starter Logic App
        run: |
          if [ ! -f "src/Sepa/logicapps/sepa-starter/workflow.json" ]; then
            echo "‚ö†Ô∏è Workflow definition not found, skipping"
            exit 0
          fi

          PREFIX=$(jq -r '.prefix' <<< '${{ steps.load_params.outputs.params }}')
          LOCATION_SHORT=$(jq -r '.locationShort' <<< '${{ steps.load_params.outputs.params }}')
          HANDLER_LOGIC_APP_ID="${{ steps.deploy_handler.outputs.logicAppId }}"

          # Get API Connection IDs from the construction step
          BLOB_CONN_ID="${{ steps.get_connections.outputs.blobApiConnectionId }}"
          BLOB_CONN_NAME="${{ steps.get_connections.outputs.blobApiConnectionName }}"

          # Get current subscription ID
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)

          echo "‚úÖ Using Blob API Connection:"
          echo "  Name: $BLOB_CONN_NAME"
          echo "  ID: $BLOB_CONN_ID"

          # Inject the actual resource ID into the workflow definition
          # Replace @parameters('handlerLogicAppId') with the actual resource ID
          WORKFLOW_DEF=$(cat src/Sepa/logicapps/sepa-starter/workflow.json | jq --arg id "$HANDLER_LOGIC_APP_ID" '
            # Remove the handlerLogicAppId parameter from definition
            del(.parameters.handlerLogicAppId) |
            # Replace the parameter reference with the actual resource ID and add triggerName
            .actions.For_each_new_file.actions.Call_Handler_Logic_App.inputs.host.workflow.id = $id |
            .actions.For_each_new_file.actions.Call_Handler_Logic_App.inputs.host.triggerName = "manual"
          ')

          # Debug: Show what we're about to use
          echo "üîç Values before creating JSON:"
          echo "  BLOB_CONN_ID length: ${#BLOB_CONN_ID}"
          echo "  BLOB_CONN_ID: $BLOB_CONN_ID"

          # Create parameters file with modified workflow definition and API connections
          cat > /tmp/starter-params.json <<EOF
          {
            "\$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
            "contentVersion": "1.0.0.0",
            "parameters": {
              "prefix": { "value": "$PREFIX" },
              "environment": { "value": "${{ inputs.environment }}" },
              "location": { "value": "swedencentral" },
              "locationShort": { "value": "$LOCATION_SHORT" },
              "integrationName": { "value": "sepa" },
              "workflowName": { "value": "sepa-starter" },
              "workflowDefinition": { "value": $WORKFLOW_DEF },
              "workflowParameters": { "value": {} },
              "connections": {
                "value": {
                  "azureblob": {
                    "connectionId": "$BLOB_CONN_ID",
                    "connectionName": "$BLOB_CONN_NAME",
                    "id": "/subscriptions/$SUBSCRIPTION_ID/providers/Microsoft.Web/locations/swedencentral/managedApis/azureblob"
                  }
                }
              }
            }
          }
          EOF

          # Debug: Show what was actually written
          echo "üîç Generated parameters file:"
          cat /tmp/starter-params.json | jq '.parameters.connections.value.azureblob'

          az deployment sub create \
            --location swedencentral \
            --template-file bicep/modules/singleWorkflow.bicep \
            --parameters /tmp/starter-params.json \
            --name sepa-starter-${{ inputs.environment }}-${{ github.run_number }}

      - name: üìä Output Logic Apps Deployment Summary
        run: |
          echo "## Logic Apps Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Logic Apps" >> $GITHUB_STEP_SUMMARY
          if [ -f "src/Sepa/logicapps/sepa-starter/workflow.json" ]; then
            echo "- ‚úÖ SEPA Starter" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è SEPA Starter (workflow.json not found)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "src/Sepa/logicapps/sepa-handler/workflow.json" ]; then
            echo "- ‚úÖ SEPA Handler" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è SEPA Handler (workflow.json not found)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "src/Sepa/logicapps/sepa-process/workflow.json" ]; then
            echo "- ‚úÖ SEPA Process" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è SEPA Process (workflow.json not found)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Azure Logout
        if: always()
        run: az logout
