{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "3603548894696951407"
    }
  },
  "parameters": {
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Customer/project prefix for resource naming"
      }
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "uat",
        "prod"
      ],
      "metadata": {
        "description": "Environment name (dev, test, uat, prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Azure region for resources"
      }
    },
    "locationShort": {
      "type": "string",
      "metadata": {
        "description": "Azure region short code (e.g., weu for West Europe)"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Common tags to apply to all resources"
      }
    },
    "deployKeyVault": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Key Vault"
      }
    },
    "deployStorageAccount": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Storage Account"
      }
    },
    "deployAppServicePlan": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy App Service Plan"
      }
    },
    "deployManagedIdentity": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Managed Identity"
      }
    },
    "deployVirtualNetwork": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Virtual Network"
      }
    },
    "deployNatGateway": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy NAT Gateway"
      }
    },
    "deployApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Application Insights"
      }
    },
    "deployLogAnalyticsWorkspace": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Log Analytics Workspace"
      }
    },
    "deployServiceBus": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Service Bus Namespace"
      }
    },
    "deployApiConnections": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy API Connections for Logic Apps"
      }
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "Key Vault SKU"
      }
    },
    "keyVaultSoftDeleteRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "metadata": {
        "description": "Key Vault soft delete retention in days"
      }
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS"
      ],
      "metadata": {
        "description": "Storage Account SKU"
      }
    },
    "storageContainers": {
      "type": "array",
      "defaultValue": [
        {
          "name": "integration-files",
          "publicAccess": "None"
        },
        {
          "name": "logs",
          "publicAccess": "None"
        }
      ],
      "metadata": {
        "description": "Storage containers to create"
      }
    },
    "storageTables": {
      "type": "array",
      "defaultValue": [
        {
          "name": "Configuration"
        },
        {
          "name": "Logs"
        }
      ],
      "metadata": {
        "description": "Storage tables to create"
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "Y1",
        "B1",
        "B2",
        "B3",
        "EP1",
        "EP2",
        "EP3",
        "WS1",
        "WS2",
        "WS3",
        "S1",
        "S2",
        "S3",
        "P1V2",
        "P2V2",
        "P3V2"
      ],
      "metadata": {
        "description": "App Service Plan SKU"
      }
    },
    "appServicePlanKind": {
      "type": "string",
      "defaultValue": "functionapp",
      "allowedValues": [
        "functionapp",
        "elastic",
        "workflow",
        "app"
      ],
      "metadata": {
        "description": "App Service Plan kind"
      }
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable diagnostic settings"
      }
    },
    "externalLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "External Log Analytics Workspace ID for diagnostics (leave empty to use the deployed workspace)"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "PerGB2018",
        "Free",
        "Standalone",
        "PerNode",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Log Analytics Workspace SKU"
      }
    },
    "logAnalyticsRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Log Analytics Workspace retention period in days"
      }
    },
    "logAnalyticsDailyQuotaGb": {
      "type": "int",
      "defaultValue": -1,
      "metadata": {
        "description": "Log Analytics Workspace daily quota in GB (-1 for unlimited)"
      }
    },
    "serviceBusSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Service Bus SKU"
      }
    },
    "serviceBusCapacity": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        2,
        4,
        8,
        16
      ],
      "metadata": {
        "description": "Service Bus capacity (only for Premium SKU)"
      }
    },
    "vnetAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.0.0/16"
      ],
      "metadata": {
        "description": "Virtual Network address prefixes"
      }
    },
    "subnets": {
      "type": "array",
      "defaultValue": [
        {
          "name": "integration-subnet",
          "addressPrefix": "10.0.1.0/24"
        },
        {
          "name": "private-endpoint-subnet",
          "addressPrefix": "10.0.2.0/24"
        }
      ],
      "metadata": {
        "description": "Subnets configuration"
      }
    },
    "natGatewayIdleTimeoutInMinutes": {
      "type": "int",
      "defaultValue": 4,
      "metadata": {
        "description": "NAT Gateway idle timeout in minutes"
      }
    },
    "applicationInsightsRetentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "Application Insights retention period in days"
      }
    },
    "alertEmailReceivers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Email addresses for alert notifications"
      }
    },
    "enableDefaultAlerts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable default metric alerts"
      }
    }
  },
  "variables": {
    "resourceGroupName": "[format('{0}-{1}-common-rg', parameters('prefix'), parameters('environment'))]",
    "commonTags": "[union(parameters('tags'), createObject('Environment', parameters('environment'), 'ManagedBy', 'Bicep'))]",
    "storageAccountNameCalculated": "[toLower(replace(format('{0}{1}{2}st', parameters('prefix'), parameters('environment'), parameters('locationShort')), '-', ''))]",
    "storageBlobDataContributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[variables('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('commonTags')]"
    },
    {
      "condition": "[parameters('deployKeyVault')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "keyVaultNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "kv"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployStorageAccount')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "storageAccountNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "st"
          },
          "useShortNames": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployAppServicePlan')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appServicePlanNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "plan"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployManagedIdentity')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "managedIdentityNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "id"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "virtualNetworkNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "vnet"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployNatGateway')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "natGatewayNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "nat"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployNatGateway')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "publicIpNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "pip"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployApplicationInsights')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "applicationInsightsNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "appi"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(parameters('deployApplicationInsights'), greater(length(parameters('alertEmailReceivers')), 0))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "actionGroupNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "ag"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployLogAnalyticsWorkspace')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "logAnalyticsWorkspaceNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "log"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployServiceBus')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "serviceBusNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "sb"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(parameters('deployApiConnections'), parameters('deployStorageAccount'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "apiConnectionNaming",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[parameters('prefix')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "locationShort": {
            "value": "[parameters('locationShort')]"
          },
          "resourceType": {
            "value": "apic"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3174528743679203941"
            }
          },
          "parameters": {
            "prefix": {
              "type": "string",
              "metadata": {
                "description": "Customer/project prefix for resource naming"
              }
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "uat",
                "prod"
              ],
              "metadata": {
                "description": "Environment name (dev, test, uat, prod)"
              }
            },
            "locationShort": {
              "type": "string",
              "metadata": {
                "description": "Azure region short code (e.g., weu for West Europe)"
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional workload or integration name"
              }
            },
            "resourceType": {
              "type": "string",
              "metadata": {
                "description": "Resource type abbreviation"
              }
            },
            "instance": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional instance number for multiple instances"
              }
            },
            "useShortNames": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Use short naming format (for resources with strict character limits like storage accounts)"
              }
            }
          },
          "variables": {
            "separator": "-",
            "environmentShortNames": {
              "dev": "d",
              "test": "t",
              "uat": "u",
              "prod": "p"
            },
            "locationShortNames": {
              "weu": "we",
              "eus": "eu",
              "sdc": "sc",
              "westeurope": "we",
              "eastus": "eu",
              "swedencentral": "sc",
              "northeurope": "ne",
              "westus": "wu",
              "centralus": "cu"
            },
            "resourceTypeShortNames": {
              "st": "st",
              "kv": "kv",
              "func": "fn",
              "logic": "la",
              "sb": "sb",
              "appi": "ai",
              "plan": "pl",
              "vnet": "vn",
              "id": "id"
            },
            "nameComponents": "[if(parameters('useShortNames'), createArray(take(parameters('prefix'), 6), variables('environmentShortNames')[parameters('environment')], coalesce(tryGet(variables('locationShortNames'), parameters('locationShort')), take(parameters('locationShort'), 2))), createArray(parameters('prefix'), parameters('environment'), parameters('locationShort')))]",
            "workloadShortName": "[if(and(parameters('useShortNames'), not(empty(parameters('workloadName')))), take(parameters('workloadName'), 8), parameters('workloadName'))]",
            "nameWithWorkload": "[if(not(empty(parameters('workloadName'))), concat(variables('nameComponents'), createArray(variables('workloadShortName'))), variables('nameComponents'))]",
            "resourceTypeShort": "[if(parameters('useShortNames'), coalesce(tryGet(variables('resourceTypeShortNames'), parameters('resourceType')), parameters('resourceType')), parameters('resourceType'))]",
            "nameWithType": "[concat(variables('nameWithWorkload'), createArray(variables('resourceTypeShort')))]",
            "instanceShort": "[if(and(parameters('useShortNames'), not(empty(parameters('instance')))), take(parameters('instance'), 2), parameters('instance'))]",
            "finalComponents": "[if(not(empty(parameters('instance'))), concat(variables('nameWithType'), createArray(variables('instanceShort'))), variables('nameWithType'))]",
            "resourceName": "[if(parameters('useShortNames'), toLower(replace(join(variables('finalComponents'), ''), '-', '')), join(variables('finalComponents'), variables('separator')))]"
          },
          "resources": [],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('resourceName')]"
            },
            "components": {
              "type": "object",
              "value": {
                "prefix": "[parameters('prefix')]",
                "environment": "[parameters('environment')]",
                "locationShort": "[parameters('locationShort')]",
                "workloadName": "[parameters('workloadName')]",
                "resourceType": "[parameters('resourceType')]",
                "instance": "[parameters('instance')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployManagedIdentity')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "managedIdentity",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentityNaming'), '2025-04-01').outputs.name.value, '-', '')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "assignKeyVaultSecretsUser": {
            "value": false
          },
          "assignStorageBlobDataContributor": {
            "value": false
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "14161069510265697367"
            }
          },
          "parameters": {
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Managed Identity"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the Managed Identity"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Managed Identity"
              }
            },
            "keyVaultId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Key Vault resource ID for role assignment"
              }
            },
            "storageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Storage Account resource ID for role assignment"
              }
            },
            "assignKeyVaultSecretsUser": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Assign Key Vault Secrets User role"
              }
            },
            "assignStorageBlobDataContributor": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Assign Storage Blob Data Contributor role"
              }
            }
          },
          "variables": {
            "keyVaultSecretsUserRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
            "storageBlobDataContributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[and(not(empty(parameters('keyVaultId'))), parameters('assignKeyVaultSecretsUser'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), parameters('keyVaultId'), variables('keyVaultSecretsUserRoleId'))]",
              "properties": {
                "roleDefinitionId": "[variables('keyVaultSecretsUserRoleId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "condition": "[and(not(empty(parameters('storageAccountId'))), parameters('assignStorageBlobDataContributor'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), parameters('storageAccountId'), variables('storageBlobDataContributorRoleId'))]",
              "properties": {
                "roleDefinitionId": "[variables('storageBlobDataContributorRoleId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity resource ID"
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity name"
              },
              "value": "[parameters('managedIdentityName')]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity principal ID"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity client ID"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31').clientId]"
            },
            "managedIdentity": {
              "type": "object",
              "metadata": {
                "description": "Managed Identity object"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2023-01-31', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentityNaming')]"
      ]
    },
    {
      "condition": "[parameters('deployKeyVault')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "keyVault",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'keyVaultNaming'), '2025-04-01').outputs.name.value, '-', '')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "skuName": {
            "value": "[parameters('keyVaultSku')]"
          },
          "enableRbacAuthorization": {
            "value": false
          },
          "accessPolicies": "[if(parameters('deployManagedIdentity'), createObject('value', createArray(createObject('tenantId', subscription().tenantId, 'objectId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity'), '2025-04-01').outputs.principalId.value, 'permissions', createObject('secrets', createArray('get', 'list', 'set'), 'keys', createArray(), 'certificates', createArray())))), createObject('value', createArray()))]",
          "enableSoftDelete": {
            "value": true
          },
          "softDeleteRetentionInDays": {
            "value": "[parameters('keyVaultSoftDeleteRetentionInDays')]"
          },
          "enablePurgeProtection": {
            "value": "[equals(parameters('environment'), 'prod')]"
          },
          "enableDiagnostics": {
            "value": "[parameters('enableDiagnostics')]"
          },
          "logAnalyticsWorkspaceId": "[if(not(empty(parameters('externalLogAnalyticsWorkspaceId'))), createObject('value', parameters('externalLogAnalyticsWorkspaceId')), if(parameters('deployLogAnalyticsWorkspace'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace'), '2025-04-01').outputs.id.value), createObject('value', '')))]",
          "networkAcls": {
            "value": {
              "defaultAction": "Deny",
              "bypass": "AzureServices",
              "ipRules": [
                {
                  "value": "217.149.56.100"
                }
              ],
              "virtualNetworkRules": "[if(parameters('deployVirtualNetwork'), createArray(createObject('id', format('{0}/subnets/integration-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2025-04-01').outputs.id.value), 'ignoreMissingVnetServiceEndpoint', false())), createArray())]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "10397282967512450246"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the Key Vault"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Key Vault"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "SKU name for the Key Vault"
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable RBAC authorization instead of access policies"
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable soft delete"
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "minValue": 7,
              "maxValue": 90,
              "metadata": {
                "description": "Soft delete retention period in days"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable purge protection"
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "metadata": {
                "description": "Enable public network access"
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {
                "defaultAction": "Deny",
                "bypass": "AzureServices",
                "ipRules": [],
                "virtualNetworkRules": []
              },
              "metadata": {
                "description": "Network ACLs configuration"
              }
            },
            "enableDiagnostics": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable diagnostic settings"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Log Analytics Workspace ID for diagnostics"
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Access policies for Key Vault (used when RBAC is disabled)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "[parameters('skuName')]"
                },
                "tenantId": "[subscription().tenantId]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "accessPolicies": "[if(not(parameters('enableRbacAuthorization')), parameters('accessPolicies'), createArray())]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), true(), null())]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": "[parameters('networkAcls')]",
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true
              }
            },
            {
              "condition": "[and(parameters('enableDiagnostics'), not(empty(parameters('logAnalyticsWorkspaceId'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[format('{0}-diagnostics', parameters('keyVaultName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  },
                  {
                    "categoryGroup": "audit",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Key Vault resource ID"
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Key Vault name"
              },
              "value": "[parameters('keyVaultName')]"
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "Key Vault URI"
              },
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            },
            "keyVault": {
              "type": "object",
              "metadata": {
                "description": "Key Vault resource object"
              },
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'keyVaultNaming')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork')]"
      ]
    },
    {
      "condition": "[parameters('deployStorageAccount')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "storageAccount",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameCalculated')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "skuName": {
            "value": "[parameters('storageAccountSku')]"
          },
          "kind": {
            "value": "StorageV2"
          },
          "accessTier": {
            "value": "Hot"
          },
          "containers": {
            "value": "[parameters('storageContainers')]"
          },
          "tables": {
            "value": "[parameters('storageTables')]"
          },
          "enableDiagnostics": {
            "value": "[parameters('enableDiagnostics')]"
          },
          "logAnalyticsWorkspaceId": "[if(not(empty(parameters('externalLogAnalyticsWorkspaceId'))), createObject('value', parameters('externalLogAnalyticsWorkspaceId')), if(parameters('deployLogAnalyticsWorkspace'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace'), '2025-04-01').outputs.id.value), createObject('value', '')))]",
          "networkAclDefaultAction": {
            "value": "Deny"
          },
          "ipRules": {
            "value": [
              "217.149.56.100"
            ]
          },
          "virtualNetworkRules": "[if(parameters('deployVirtualNetwork'), createObject('value', createArray(format('{0}/subnets/integration-subnet', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2025-04-01').outputs.id.value))), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "11261190574014668103"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "minLength": 3,
              "maxLength": 24,
              "metadata": {
                "description": "Name of the Storage Account"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the Storage Account"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Storage Account"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Storage Account SKU"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage"
              ],
              "metadata": {
                "description": "Storage Account kind"
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Hot",
                "Cool"
              ],
              "metadata": {
                "description": "Access tier for blob storage"
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
              ],
              "metadata": {
                "description": "Minimum TLS version"
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Allow blob public access"
              }
            },
            "supportsHttpsTrafficOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable HTTPS traffic only"
              }
            },
            "isHnsEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable hierarchical namespace (Data Lake)"
              }
            },
            "containers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Blob containers to create"
              }
            },
            "tables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Table storage tables to create"
              }
            },
            "enableDiagnostics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable diagnostic settings"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Log Analytics Workspace ID for diagnostics"
              }
            },
            "networkAclDefaultAction": {
              "type": "string",
              "defaultValue": "Deny",
              "allowedValues": [
                "Allow",
                "Deny"
              ],
              "metadata": {
                "description": "Network ACL default action"
              }
            },
            "ipRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "IP rules for storage account access"
              }
            },
            "virtualNetworkRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Virtual network rules for storage account access"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "kind": "[parameters('kind')]",
              "properties": {
                "accessTier": "[parameters('accessTier')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                "isHnsEnabled": "[parameters('isHnsEnabled')]",
                "encryption": {
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "networkAcls": {
                  "copy": [
                    {
                      "name": "ipRules",
                      "count": "[length(parameters('ipRules'))]",
                      "input": {
                        "value": "[parameters('ipRules')[copyIndex('ipRules')]]",
                        "action": "Allow"
                      }
                    },
                    {
                      "name": "virtualNetworkRules",
                      "count": "[length(parameters('virtualNetworkRules'))]",
                      "input": {
                        "id": "[parameters('virtualNetworkRules')[copyIndex('virtualNetworkRules')]]",
                        "action": "Allow"
                      }
                    }
                  ],
                  "defaultAction": "[parameters('networkAclDefaultAction')]",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                },
                "containerDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "blobContainers",
                "count": "[length(parameters('containers'))]"
              },
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'publicAccess'), 'None')]",
                "metadata": "[coalesce(tryGet(parameters('containers')[copyIndex()], 'metadata'), createObject())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[greater(length(parameters('tables')), 0)]",
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "storageTables",
                "count": "[length(parameters('tables'))]"
              },
              "condition": "[greater(length(parameters('tables')), 0)]",
              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('tables')[copyIndex()].name)]",
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[and(parameters('enableDiagnostics'), not(empty(parameters('logAnalyticsWorkspaceId'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-blob-diagnostics', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Storage Account resource ID"
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Storage Account name"
              },
              "value": "[parameters('storageAccountName')]"
            },
            "primaryBlobEndpoint": {
              "type": "string",
              "metadata": {
                "description": "Primary blob endpoint"
              },
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints.blob]"
            },
            "primaryEndpoints": {
              "type": "object",
              "metadata": {
                "description": "Primary endpoints object"
              },
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').primaryEndpoints]"
            },
            "storageAccount": {
              "type": "object",
              "metadata": {
                "description": "Storage Account object"
              },
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork')]"
      ]
    },
    {
      "condition": "[and(parameters('deployApiConnections'), parameters('deployStorageAccount'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "storageTablesApiConnection",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "connectionName": {
            "value": "[format('{0}-tables', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'apiConnectionNaming'), '2025-04-01').outputs.name.value)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[union(variables('commonTags'), createObject('Purpose', 'Logic Apps Table Storage Access'))]"
          },
          "connectionType": {
            "value": "azuretables"
          },
          "displayName": {
            "value": "Common Storage Tables"
          },
          "storageAccountResourceGroup": {
            "value": "[variables('resourceGroupName')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountNameCalculated')]"
          },
          "parameterValues": {
            "value": {}
          },
          "additionalParameterValues": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "4308667893580991802"
            }
          },
          "parameters": {
            "connectionName": {
              "type": "string",
              "metadata": {
                "description": "Name of the API connection"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the connection"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the connection"
              }
            },
            "connectionType": {
              "type": "string",
              "metadata": {
                "description": "Connection type (azuretables, azureblob, office365, etc.)"
              }
            },
            "displayName": {
              "type": "string",
              "metadata": {
                "description": "Display name for the connection"
              }
            },
            "parameterValues": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Connection parameters - varies by connection type"
              }
            },
            "additionalParameterValues": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Connection parameter values that are not sensitive"
              }
            },
            "storageAccountResourceGroup": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "For azuretables connection: Resource group containing the storage account"
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "For azuretables connection: Storage account name"
              }
            }
          },
          "variables": {
            "connectionTypes": {
              "azuretables": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azuretables')]",
                "displayName": "Azure Table Storage"
              },
              "azureblob": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureblob')]",
                "displayName": "Azure Blob Storage"
              },
              "servicebus": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'servicebus')]",
                "displayName": "Service Bus"
              },
              "office365": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'office365')]",
                "displayName": "Office 365 Outlook"
              },
              "sql": {
                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'sql')]",
                "displayName": "SQL Server"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[parameters('connectionName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), variables('connectionTypes')[parameters('connectionType')].displayName)]",
                "api": {
                  "id": "[variables('connectionTypes')[parameters('connectionType')].id]"
                },
                "parameterValues": "[union(parameters('parameterValues'), parameters('additionalParameterValues'), if(and(and(equals(parameters('connectionType'), 'azuretables'), not(empty(parameters('storageAccountResourceGroup')))), not(empty(parameters('storageAccountName')))), createObject('storageaccount', parameters('storageAccountName'), 'sharedkey', listKeys(resourceId(parameters('storageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-01-01').keys[0].value), createObject()))]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "API Connection resource ID"
              },
              "value": "[resourceId('Microsoft.Web/connections', parameters('connectionName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "API Connection name"
              },
              "value": "[parameters('connectionName')]"
            },
            "statusLink": {
              "type": "string",
              "metadata": {
                "description": "API Connection status link"
              },
              "value": "[if(greater(length(reference(resourceId('Microsoft.Web/connections', parameters('connectionName')), '2016-06-01').statuses), 0), reference(resourceId('Microsoft.Web/connections', parameters('connectionName')), '2016-06-01').statuses[0].status, 'Unknown')]"
            },
            "connection": {
              "type": "object",
              "metadata": {
                "description": "API Connection object"
              },
              "value": "[reference(resourceId('Microsoft.Web/connections', parameters('connectionName')), '2016-06-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'apiConnectionNaming')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployAppServicePlan')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appServicePlan",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'appServicePlanNaming'), '2025-04-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "skuName": {
            "value": "[parameters('appServicePlanSku')]"
          },
          "kind": {
            "value": "[parameters('appServicePlanKind')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "3679906323409539681"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string",
              "metadata": {
                "description": "Name of the App Service Plan"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the App Service Plan"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the App Service Plan"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "B1",
              "allowedValues": [
                "Y1",
                "B1",
                "B2",
                "B3",
                "EP1",
                "EP2",
                "EP3",
                "WS1",
                "WS2",
                "WS3",
                "S1",
                "S2",
                "S3",
                "P1V2",
                "P2V2",
                "P3V2"
              ],
              "metadata": {
                "description": "App Service Plan SKU name"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "functionapp",
              "allowedValues": [
                "functionapp",
                "elastic",
                "workflow",
                "app"
              ],
              "metadata": {
                "description": "App Service Plan kind"
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable zone redundancy (requires Premium V2 or higher)"
              }
            },
            "maximumElasticWorkerCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Maximum number of workers (elastic scale)"
              }
            },
            "targetWorkerCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Number of workers (pre-warmed instances for Elastic Premium)"
              }
            }
          },
          "variables": {
            "skuTierMap": {
              "Y1": "Dynamic",
              "B1": "Basic",
              "B2": "Basic",
              "B3": "Basic",
              "EP1": "ElasticPremium",
              "EP2": "ElasticPremium",
              "EP3": "ElasticPremium",
              "WS1": "WorkflowStandard",
              "WS2": "WorkflowStandard",
              "WS3": "WorkflowStandard",
              "S1": "Standard",
              "S2": "Standard",
              "S3": "Standard",
              "P1V2": "PremiumV2",
              "P2V2": "PremiumV2",
              "P3V2": "PremiumV2"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-01-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[variables('skuTierMap')[parameters('skuName')]]"
              },
              "properties": {
                "reserved": false,
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "maximumElasticWorkerCount": "[if(equals(parameters('skuName'), 'Y1'), 1, parameters('maximumElasticWorkerCount'))]",
                "targetWorkerCount": "[if(equals(parameters('skuName'), 'Y1'), 0, parameters('targetWorkerCount'))]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan resource ID"
              },
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan name"
              },
              "value": "[parameters('appServicePlanName')]"
            },
            "sku": {
              "type": "object",
              "metadata": {
                "description": "App Service Plan SKU"
              },
              "value": "[reference(resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName')), '2023-01-01', 'full').sku]"
            },
            "appServicePlan": {
              "type": "object",
              "metadata": {
                "description": "App Service Plan object"
              },
              "value": "[reference(resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName')), '2023-01-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'appServicePlanNaming')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployNatGateway')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "publicIp",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "publicIpName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'publicIpNaming'), '2025-04-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "skuName": {
            "value": "Standard"
          },
          "allocationMethod": {
            "value": "Static"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "17249274585194846822"
            }
          },
          "parameters": {
            "publicIpName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Public IP Address"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the Public IP Address"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Public IP Address"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Public IP Address SKU"
              }
            },
            "allocationMethod": {
              "type": "string",
              "defaultValue": "Static",
              "allowedValues": [
                "Static",
                "Dynamic"
              ],
              "metadata": {
                "description": "Public IP Address allocation method"
              }
            },
            "tier": {
              "type": "string",
              "defaultValue": "Regional",
              "allowedValues": [
                "Regional",
                "Global"
              ],
              "metadata": {
                "description": "Public IP Address tier"
              }
            },
            "idleTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 4,
              "maxValue": 30,
              "metadata": {
                "description": "Idle timeout in minutes"
              }
            },
            "domainNameLabel": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "DNS domain name label (optional)"
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Availability zones"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-09-01",
              "name": "[parameters('publicIpName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('tier')]"
              },
              "zones": "[if(not(empty(parameters('zones'))), parameters('zones'), null())]",
              "properties": {
                "publicIPAllocationMethod": "[parameters('allocationMethod')]",
                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                "dnsSettings": "[if(not(empty(parameters('domainNameLabel'))), createObject('domainNameLabel', parameters('domainNameLabel')), null())]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Public IP Address resource ID"
              },
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Public IP Address name"
              },
              "value": "[parameters('publicIpName')]"
            },
            "ipAddress": {
              "type": "string",
              "metadata": {
                "description": "Public IP Address"
              },
              "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2023-09-01'), 'ipAddress'), '')]"
            },
            "publicIp": {
              "type": "object",
              "metadata": {
                "description": "Public IP Address object"
              },
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2023-09-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'publicIpNaming')]"
      ]
    },
    {
      "condition": "[parameters('deployNatGateway')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "natGateway",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "natGatewayName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'natGatewayNaming'), '2025-04-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "publicIpAddressIds": "[if(parameters('deployNatGateway'), createObject('value', createArray(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'publicIp'), '2025-04-01').outputs.id.value)), createObject('value', createArray()))]",
          "idleTimeoutInMinutes": {
            "value": "[parameters('natGatewayIdleTimeoutInMinutes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "4042797453036348233"
            }
          },
          "parameters": {
            "natGatewayName": {
              "type": "string",
              "metadata": {
                "description": "Name of the NAT Gateway"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the NAT Gateway"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the NAT Gateway"
              }
            },
            "publicIpAddressIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Public IP Address resource IDs to associate with the NAT Gateway"
              }
            },
            "idleTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 4,
              "maxValue": 120,
              "metadata": {
                "description": "Idle timeout in minutes"
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Availability zones"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard"
              ],
              "metadata": {
                "description": "NAT Gateway SKU"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/natGateways",
              "apiVersion": "2023-09-01",
              "name": "[parameters('natGatewayName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "zones": "[if(not(empty(parameters('zones'))), parameters('zones'), null())]",
              "properties": {
                "copy": [
                  {
                    "name": "publicIpAddresses",
                    "count": "[length(parameters('publicIpAddressIds'))]",
                    "input": {
                      "id": "[parameters('publicIpAddressIds')[copyIndex('publicIpAddresses')]]"
                    }
                  }
                ],
                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "NAT Gateway resource ID"
              },
              "value": "[resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "NAT Gateway name"
              },
              "value": "[parameters('natGatewayName')]"
            },
            "natGateway": {
              "type": "object",
              "metadata": {
                "description": "NAT Gateway object"
              },
              "value": "[reference(resourceId('Microsoft.Network/natGateways', parameters('natGatewayName')), '2023-09-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'natGatewayNaming')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'publicIp')]"
      ]
    },
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "virtualNetwork",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetworkNaming'), '2025-04-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "addressPrefixes": {
            "value": "[parameters('vnetAddressPrefixes')]"
          },
          "subnets": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('subnets'))]",
                "input": "[createObject('name', parameters('subnets')[copyIndex('value')].name, 'addressPrefix', parameters('subnets')[copyIndex('value')].addressPrefix, 'natGatewayId', if(and(parameters('deployNatGateway'), equals(copyIndex('value'), 0)), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'natGateway'), '2025-04-01').outputs.id.value, ''), 'serviceEndpoints', if(equals(parameters('subnets')[copyIndex('value')].name, 'integration-subnet'), createArray(createObject('service', 'Microsoft.KeyVault', 'locations', createArray('*')), createObject('service', 'Microsoft.Storage', 'locations', createArray('*'))), coalesce(tryGet(parameters('subnets')[copyIndex('value')], 'serviceEndpoints'), createArray())), 'delegations', coalesce(tryGet(parameters('subnets')[copyIndex('value')], 'delegations'), createArray()))]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "16507343122080971690"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Virtual Network"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the Virtual Network"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Virtual Network"
              }
            },
            "addressPrefixes": {
              "type": "array",
              "defaultValue": [
                "10.0.0.0/16"
              ],
              "metadata": {
                "description": "Virtual Network address prefixes"
              }
            },
            "subnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Subnets to create"
              }
            },
            "enableDdosProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable DDoS protection"
              }
            },
            "ddosProtectionPlanId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "DDoS protection plan ID (required if enableDdosProtection is true)"
              }
            },
            "enableVmProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable VM protection"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-09-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                        "networkSecurityGroup": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), not(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId))), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), null())]",
                        "routeTable": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableId'), not(empty(parameters('subnets')[copyIndex('subnets')].routeTableId))), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableId), null())]",
                        "natGateway": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayId'), not(empty(parameters('subnets')[copyIndex('subnets')].natGatewayId))), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayId), null())]",
                        "serviceEndpoints": "[coalesce(tryGet(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), createArray())]",
                        "delegations": "[coalesce(tryGet(parameters('subnets')[copyIndex('subnets')], 'delegations'), createArray())]",
                        "privateEndpointNetworkPolicies": "[coalesce(tryGet(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), 'Disabled')]",
                        "privateLinkServiceNetworkPolicies": "[coalesce(tryGet(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), 'Enabled')]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('addressPrefixes')]"
                },
                "enableDdosProtection": "[parameters('enableDdosProtection')]",
                "ddosProtectionPlan": "[if(and(parameters('enableDdosProtection'), not(empty(parameters('ddosProtectionPlanId')))), createObject('id', parameters('ddosProtectionPlanId')), null())]",
                "enableVmProtection": "[parameters('enableVmProtection')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Virtual Network resource ID"
              },
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Virtual Network name"
              },
              "value": "[parameters('virtualNetworkName')]"
            },
            "subnetIds": {
              "type": "array",
              "metadata": {
                "description": "Subnet resource IDs"
              },
              "copy": {
                "count": "[length(parameters('subnets'))]",
                "input": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-09-01').subnets[copyIndex()].id]"
              }
            },
            "subnetNames": {
              "type": "array",
              "metadata": {
                "description": "Subnet names"
              },
              "copy": {
                "count": "[length(parameters('subnets'))]",
                "input": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-09-01').subnets[copyIndex()].name]"
              }
            },
            "virtualNetwork": {
              "type": "object",
              "metadata": {
                "description": "Virtual Network object"
              },
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-09-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'natGateway')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetworkNaming')]"
      ]
    },
    {
      "condition": "[parameters('deployLogAnalyticsWorkspace')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "logAnalyticsWorkspace",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "workspaceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspaceNaming'), '2025-04-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "skuName": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "retentionInDays": {
            "value": "[parameters('logAnalyticsRetentionInDays')]"
          },
          "dailyQuotaGb": {
            "value": "[parameters('logAnalyticsDailyQuotaGb')]"
          },
          "publicNetworkAccessForIngestion": {
            "value": "Enabled"
          },
          "publicNetworkAccessForQuery": {
            "value": "Enabled"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "14025749488352472691"
            }
          },
          "parameters": {
            "workspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Log Analytics workspace"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the workspace"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the workspace"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "PerGB2018",
                "Free",
                "Standalone",
                "PerNode",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "SKU name for the workspace"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "minValue": 30,
              "maxValue": 730,
              "metadata": {
                "description": "Retention period in days"
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Daily quota in GB (-1 for unlimited)"
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Enable public network access"
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Enable public network access for query"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2023-09-01",
              "name": "[parameters('workspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]",
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": true
                },
                "workspaceCapping": "[if(greater(parameters('dailyQuotaGb'), 0), createObject('dailyQuotaGb', parameters('dailyQuotaGb')), null())]",
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace resource ID"
              },
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace name"
              },
              "value": "[parameters('workspaceName')]"
            },
            "customerId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace customer ID"
              },
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2023-09-01').customerId]"
            },
            "workspace": {
              "type": "object",
              "metadata": {
                "description": "Log Analytics Workspace object"
              },
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2023-09-01', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspaceNaming')]"
      ]
    },
    {
      "condition": "[parameters('deployServiceBus')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "serviceBus",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serviceBusName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'serviceBusNaming'), '2025-04-01').outputs.name.value, '-', '')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "skuName": {
            "value": "[parameters('serviceBusSku')]"
          },
          "capacity": {
            "value": "[parameters('serviceBusCapacity')]"
          },
          "queues": {
            "value": []
          },
          "topics": {
            "value": []
          },
          "enableDiagnostics": {
            "value": "[parameters('enableDiagnostics')]"
          },
          "logAnalyticsWorkspaceId": "[if(not(empty(parameters('externalLogAnalyticsWorkspaceId'))), createObject('value', parameters('externalLogAnalyticsWorkspaceId')), if(parameters('deployLogAnalyticsWorkspace'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace'), '2025-04-01').outputs.id.value), createObject('value', '')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "383866994947336367"
            }
          },
          "parameters": {
            "serviceBusName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Service Bus Namespace"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the Service Bus"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Service Bus"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "Service Bus SKU"
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 1,
              "allowedValues": [
                1,
                2,
                4,
                8,
                16
              ],
              "metadata": {
                "description": "Service Bus capacity (only for Premium SKU, 1-16 messaging units)"
              }
            },
            "queues": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Queues to create"
              }
            },
            "topics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Topics to create"
              }
            },
            "enableDiagnostics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable diagnostic settings"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Log Analytics Workspace ID for diagnostics"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces",
              "apiVersion": "2022-10-01-preview",
              "name": "[parameters('serviceBusName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuName')]",
                "capacity": "[if(equals(parameters('skuName'), 'Premium'), parameters('capacity'), null())]"
              },
              "properties": {
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "disableLocalAuth": false,
                "zoneRedundant": "[if(equals(parameters('skuName'), 'Premium'), true(), false())]"
              }
            },
            {
              "copy": {
                "name": "serviceBusQueues",
                "count": "[length(parameters('queues'))]"
              },
              "type": "Microsoft.ServiceBus/namespaces/queues",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}', parameters('serviceBusName'), parameters('queues')[copyIndex()].name)]",
              "properties": {
                "lockDuration": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'lockDuration'), 'PT1M')]",
                "maxSizeInMegabytes": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'maxSizeInMegabytes'), 1024)]",
                "requiresDuplicateDetection": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'requiresDuplicateDetection'), false())]",
                "requiresSession": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'requiresSession'), false())]",
                "defaultMessageTimeToLive": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'defaultMessageTimeToLive'), 'P14D')]",
                "deadLetteringOnMessageExpiration": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'deadLetteringOnMessageExpiration'), false())]",
                "maxDeliveryCount": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'maxDeliveryCount'), 10)]",
                "enableBatchedOperations": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'enableBatchedOperations'), true())]",
                "enablePartitioning": "[coalesce(tryGet(parameters('queues')[copyIndex()], 'enablePartitioning'), false())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusName'))]"
              ]
            },
            {
              "copy": {
                "name": "serviceBusTopics",
                "count": "[length(parameters('topics'))]"
              },
              "type": "Microsoft.ServiceBus/namespaces/topics",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}', parameters('serviceBusName'), parameters('topics')[copyIndex()].name)]",
              "properties": {
                "maxSizeInMegabytes": "[coalesce(tryGet(parameters('topics')[copyIndex()], 'maxSizeInMegabytes'), 1024)]",
                "requiresDuplicateDetection": "[coalesce(tryGet(parameters('topics')[copyIndex()], 'requiresDuplicateDetection'), false())]",
                "defaultMessageTimeToLive": "[coalesce(tryGet(parameters('topics')[copyIndex()], 'defaultMessageTimeToLive'), 'P14D')]",
                "enableBatchedOperations": "[coalesce(tryGet(parameters('topics')[copyIndex()], 'enableBatchedOperations'), true())]",
                "enablePartitioning": "[coalesce(tryGet(parameters('topics')[copyIndex()], 'enablePartitioning'), false())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusName'))]"
              ]
            },
            {
              "copy": {
                "name": "serviceBusSubscriptions",
                "count": "[length(parameters('topics'))]"
              },
              "condition": "[contains(parameters('topics')[copyIndex()], 'subscriptions')]",
              "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
              "apiVersion": "2022-10-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('serviceBusName'), parameters('topics')[indexOf(parameters('topics'), parameters('topics')[copyIndex()])].name, parameters('topics')[copyIndex()].subscriptions[0].name)]",
              "properties": {
                "lockDuration": "[coalesce(tryGet(parameters('topics')[copyIndex()].subscriptions[0], 'lockDuration'), 'PT1M')]",
                "requiresSession": "[coalesce(tryGet(parameters('topics')[copyIndex()].subscriptions[0], 'requiresSession'), false())]",
                "defaultMessageTimeToLive": "[coalesce(tryGet(parameters('topics')[copyIndex()].subscriptions[0], 'defaultMessageTimeToLive'), 'P14D')]",
                "deadLetteringOnMessageExpiration": "[coalesce(tryGet(parameters('topics')[copyIndex()].subscriptions[0], 'deadLetteringOnMessageExpiration'), false())]",
                "maxDeliveryCount": "[coalesce(tryGet(parameters('topics')[copyIndex()].subscriptions[0], 'maxDeliveryCount'), 10)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusName'), parameters('topics')[indexOf(parameters('topics'), parameters('topics')[copyIndex()])].name)]"
              ]
            },
            {
              "condition": "[and(parameters('enableDiagnostics'), not(empty(parameters('logAnalyticsWorkspaceId'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', parameters('serviceBusName'))]",
              "name": "[format('{0}-diagnostics', parameters('serviceBusName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Service Bus Namespace resource ID"
              },
              "value": "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Service Bus Namespace name"
              },
              "value": "[parameters('serviceBusName')]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "Service Bus Namespace endpoint"
              },
              "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusName')), '2022-10-01-preview').serviceBusEndpoint]"
            },
            "queueNames": {
              "type": "array",
              "metadata": {
                "description": "Queue names"
              },
              "copy": {
                "count": "[length(parameters('queues'))]",
                "input": "[parameters('queues')[copyIndex()].name]"
              }
            },
            "topicNames": {
              "type": "array",
              "metadata": {
                "description": "Topic names"
              },
              "copy": {
                "count": "[length(parameters('topics'))]",
                "input": "[parameters('topics')[copyIndex()].name]"
              }
            },
            "serviceBus": {
              "type": "object",
              "metadata": {
                "description": "Service Bus object"
              },
              "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusName')), '2022-10-01-preview', 'full')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'serviceBusNaming')]"
      ]
    },
    {
      "condition": "[parameters('deployApplicationInsights')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "applicationInsights",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsightsNaming'), '2025-04-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "applicationType": {
            "value": "web"
          },
          "retentionInDays": {
            "value": "[parameters('applicationInsightsRetentionInDays')]"
          },
          "publicNetworkAccessForIngestion": {
            "value": "Enabled"
          },
          "publicNetworkAccessForQuery": {
            "value": "Enabled"
          },
          "workspaceResourceId": "[if(parameters('enableDiagnostics'), if(not(empty(parameters('externalLogAnalyticsWorkspaceId'))), createObject('value', parameters('externalLogAnalyticsWorkspaceId')), if(parameters('deployLogAnalyticsWorkspace'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace'), '2025-04-01').outputs.id.value), createObject('value', ''))), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "11613613039110229109"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Insights resource"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location where the resource will be deployed"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the resource"
              }
            },
            "applicationType": {
              "type": "string",
              "defaultValue": "web",
              "allowedValues": [
                "web",
                "other"
              ],
              "metadata": {
                "description": "The type of application being monitored"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "minValue": 30,
              "maxValue": 730,
              "metadata": {
                "description": "Retention period in days"
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "metadata": {
                "description": "Enable public network access"
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "metadata": {
                "description": "Enable public network access for query"
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Workspace ID to link Application Insights to (if using workspace-based)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('applicationType')]",
              "properties": {
                "Application_Type": "[parameters('applicationType')]",
                "RetentionInDays": "[parameters('retentionInDays')]",
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                "WorkspaceResourceId": "[if(not(empty(parameters('workspaceResourceId'))), parameters('workspaceResourceId'), null())]",
                "IngestionMode": "[if(not(empty(parameters('workspaceResourceId'))), 'LogAnalytics', 'ApplicationInsights')]",
                "Request_Source": "rest",
                "DisableIpMasking": false,
                "SamplingPercentage": 100
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Application Insights instance"
              },
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Insights instance"
              },
              "value": "[parameters('name')]"
            },
            "instrumentationKey": {
              "type": "string",
              "metadata": {
                "description": "The instrumentation key for the Application Insights instance"
              },
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
            },
            "connectionString": {
              "type": "string",
              "metadata": {
                "description": "The connection string for the Application Insights instance"
              },
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsightsNaming')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace')]"
      ]
    },
    {
      "condition": "[and(parameters('deployApplicationInsights'), greater(length(parameters('alertEmailReceivers')), 0))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "actionGroup",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroupNaming'), '2025-04-01').outputs.name.value]"
          },
          "location": {
            "value": "global"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "groupShortName": {
            "value": "[take(format('{0}-{1}', parameters('prefix'), parameters('environment')), 12)]"
          },
          "enabled": {
            "value": true
          },
          "emailReceivers": {
            "value": "[parameters('alertEmailReceivers')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "11133941967790612901"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the action group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "The location where the resource will be deployed"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the resource"
              }
            },
            "groupShortName": {
              "type": "string",
              "maxLength": 12,
              "metadata": {
                "description": "The short name for the action group (max 12 characters)"
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether the action group is enabled"
              }
            },
            "emailReceivers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Email receivers configuration"
              }
            },
            "smsReceivers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "SMS receivers configuration"
              }
            },
            "webhookReceivers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Webhook receivers configuration"
              }
            },
            "azureFunctionReceivers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Azure Function receivers configuration"
              }
            },
            "logicAppReceivers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Logic App receivers configuration"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/actionGroups",
              "apiVersion": "2023-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "groupShortName": "[parameters('groupShortName')]",
                "enabled": "[parameters('enabled')]",
                "emailReceivers": "[parameters('emailReceivers')]",
                "smsReceivers": "[parameters('smsReceivers')]",
                "webhookReceivers": "[parameters('webhookReceivers')]",
                "azureFunctionReceivers": "[parameters('azureFunctionReceivers')]",
                "logicAppReceivers": "[parameters('logicAppReceivers')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the action group"
              },
              "value": "[resourceId('Microsoft.Insights/actionGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the action group"
              },
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroupNaming')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(and(parameters('deployApplicationInsights'), parameters('enableDefaultAlerts')), greater(length(parameters('alertEmailReceivers')), 0))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "availabilityAlert",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-{1}-availability-alert', parameters('prefix'), parameters('environment'))]"
          },
          "location": {
            "value": "global"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "alertDescription": {
            "value": "Alert when Application Insights availability drops below 99%"
          },
          "severity": {
            "value": 1
          },
          "enabled": {
            "value": true
          },
          "scopes": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights'), '2025-04-01').outputs.id.value]"
            ]
          },
          "evaluationFrequency": {
            "value": "PT5M"
          },
          "windowSize": {
            "value": "PT15M"
          },
          "criteria": {
            "value": {
              "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
              "allOf": [
                {
                  "name": "AvailabilityCheck",
                  "metricName": "availabilityResults/availabilityPercentage",
                  "metricNamespace": "Microsoft.Insights/components",
                  "operator": "LessThan",
                  "threshold": 99,
                  "timeAggregation": "Average",
                  "criterionType": "StaticThresholdCriterion"
                }
              ]
            }
          },
          "actionGroupIds": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroup'), '2025-04-01').outputs.id.value]"
            ]
          },
          "autoMitigate": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "9972651395889276656"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the metric alert"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "The location where the resource will be deployed"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the resource"
              }
            },
            "alertDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The description of the alert"
              }
            },
            "severity": {
              "type": "int",
              "defaultValue": 2,
              "minValue": 0,
              "maxValue": 4,
              "metadata": {
                "description": "The severity of the alert (0=Critical, 1=Error, 2=Warning, 3=Informational, 4=Verbose)"
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether the alert is enabled"
              }
            },
            "scopes": {
              "type": "array",
              "metadata": {
                "description": "The resource IDs to scope the alert to"
              }
            },
            "evaluationFrequency": {
              "type": "string",
              "defaultValue": "PT5M",
              "metadata": {
                "description": "How often the metric alert is evaluated (ISO 8601 duration)"
              }
            },
            "windowSize": {
              "type": "string",
              "defaultValue": "PT15M",
              "metadata": {
                "description": "The period of time used to monitor alert activity (ISO 8601 duration)"
              }
            },
            "criteria": {
              "type": "object",
              "metadata": {
                "description": "The criteria for the alert"
              }
            },
            "actionGroupIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The IDs of the action groups to trigger"
              }
            },
            "autoMitigate": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to auto-mitigate the alert"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "actions",
                    "count": "[length(parameters('actionGroupIds'))]",
                    "input": {
                      "actionGroupId": "[parameters('actionGroupIds')[copyIndex('actions')]]",
                      "webHookProperties": {}
                    }
                  }
                ],
                "description": "[parameters('alertDescription')]",
                "severity": "[parameters('severity')]",
                "enabled": "[parameters('enabled')]",
                "scopes": "[parameters('scopes')]",
                "evaluationFrequency": "[parameters('evaluationFrequency')]",
                "windowSize": "[parameters('windowSize')]",
                "criteria": "[parameters('criteria')]",
                "autoMitigate": "[parameters('autoMitigate')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the metric alert"
              },
              "value": "[resourceId('Microsoft.Insights/metricAlerts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the metric alert"
              },
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroup')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(and(parameters('deployApplicationInsights'), parameters('enableDefaultAlerts')), greater(length(parameters('alertEmailReceivers')), 0))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "exceptionsAlert",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-{1}-exceptions-alert', parameters('prefix'), parameters('environment'))]"
          },
          "location": {
            "value": "global"
          },
          "tags": {
            "value": "[variables('commonTags')]"
          },
          "alertDescription": {
            "value": "Alert when exception count exceeds threshold"
          },
          "severity": {
            "value": 2
          },
          "enabled": {
            "value": true
          },
          "scopes": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights'), '2025-04-01').outputs.id.value]"
            ]
          },
          "evaluationFrequency": {
            "value": "PT5M"
          },
          "windowSize": {
            "value": "PT15M"
          },
          "criteria": {
            "value": {
              "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
              "allOf": [
                {
                  "name": "ExceptionCheck",
                  "metricName": "exceptions/count",
                  "metricNamespace": "Microsoft.Insights/components",
                  "operator": "GreaterThan",
                  "threshold": 10,
                  "timeAggregation": "Count",
                  "criterionType": "StaticThresholdCriterion"
                }
              ]
            }
          },
          "actionGroupIds": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroup'), '2025-04-01').outputs.id.value]"
            ]
          },
          "autoMitigate": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "9972651395889276656"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the metric alert"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "The location where the resource will be deployed"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the resource"
              }
            },
            "alertDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The description of the alert"
              }
            },
            "severity": {
              "type": "int",
              "defaultValue": 2,
              "minValue": 0,
              "maxValue": 4,
              "metadata": {
                "description": "The severity of the alert (0=Critical, 1=Error, 2=Warning, 3=Informational, 4=Verbose)"
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether the alert is enabled"
              }
            },
            "scopes": {
              "type": "array",
              "metadata": {
                "description": "The resource IDs to scope the alert to"
              }
            },
            "evaluationFrequency": {
              "type": "string",
              "defaultValue": "PT5M",
              "metadata": {
                "description": "How often the metric alert is evaluated (ISO 8601 duration)"
              }
            },
            "windowSize": {
              "type": "string",
              "defaultValue": "PT15M",
              "metadata": {
                "description": "The period of time used to monitor alert activity (ISO 8601 duration)"
              }
            },
            "criteria": {
              "type": "object",
              "metadata": {
                "description": "The criteria for the alert"
              }
            },
            "actionGroupIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The IDs of the action groups to trigger"
              }
            },
            "autoMitigate": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to auto-mitigate the alert"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/metricAlerts",
              "apiVersion": "2018-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "actions",
                    "count": "[length(parameters('actionGroupIds'))]",
                    "input": {
                      "actionGroupId": "[parameters('actionGroupIds')[copyIndex('actions')]]",
                      "webHookProperties": {}
                    }
                  }
                ],
                "description": "[parameters('alertDescription')]",
                "severity": "[parameters('severity')]",
                "enabled": "[parameters('enabled')]",
                "scopes": "[parameters('scopes')]",
                "evaluationFrequency": "[parameters('evaluationFrequency')]",
                "windowSize": "[parameters('windowSize')]",
                "criteria": "[parameters('criteria')]",
                "autoMitigate": "[parameters('autoMitigate')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the metric alert"
              },
              "value": "[resourceId('Microsoft.Insights/metricAlerts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the metric alert"
              },
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroup')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "condition": "[and(parameters('deployManagedIdentity'), parameters('deployStorageAccount'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "storageRoleAssignment",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": "[if(parameters('deployManagedIdentity'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity'), '2025-04-01').outputs.principalId.value), createObject('value', ''))]",
          "roleDefinitionId": {
            "value": "[variables('storageBlobDataContributorRoleId')]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "10391257520998757089"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID (object ID) to assign the role to"
              }
            },
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "The role definition ID to assign"
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "User",
                "Group",
                "ServicePrincipal",
                "ForeignGroup"
              ],
              "metadata": {
                "description": "The type of principal"
              }
            },
            "roleDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Description of the role assignment"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "description": "[if(not(empty(parameters('roleDescription'))), parameters('roleDescription'), null())]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "metadata": {
                "description": "Role assignment ID"
              },
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Role assignment name"
              },
              "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity')]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Common resource group name"
      },
      "value": "[variables('resourceGroupName')]"
    },
    "resourceGroupId": {
      "type": "string",
      "metadata": {
        "description": "Common resource group ID"
      },
      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Key Vault name"
      },
      "value": "[if(parameters('deployKeyVault'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'keyVault'), '2025-04-01').outputs.name.value, '')]"
    },
    "keyVaultId": {
      "type": "string",
      "metadata": {
        "description": "Key Vault ID"
      },
      "value": "[if(parameters('deployKeyVault'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'keyVault'), '2025-04-01').outputs.id.value, '')]"
    },
    "keyVaultUri": {
      "type": "string",
      "metadata": {
        "description": "Key Vault URI"
      },
      "value": "[if(parameters('deployKeyVault'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'keyVault'), '2025-04-01').outputs.uri.value, '')]"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage Account name"
      },
      "value": "[if(parameters('deployStorageAccount'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'storageAccount'), '2025-04-01').outputs.name.value, '')]"
    },
    "storageAccountId": {
      "type": "string",
      "metadata": {
        "description": "Storage Account ID"
      },
      "value": "[if(parameters('deployStorageAccount'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'storageAccount'), '2025-04-01').outputs.id.value, '')]"
    },
    "appServicePlanName": {
      "type": "string",
      "metadata": {
        "description": "App Service Plan name"
      },
      "value": "[if(parameters('deployAppServicePlan'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'appServicePlan'), '2025-04-01').outputs.name.value, '')]"
    },
    "appServicePlanId": {
      "type": "string",
      "metadata": {
        "description": "App Service Plan ID"
      },
      "value": "[if(parameters('deployAppServicePlan'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'appServicePlan'), '2025-04-01').outputs.id.value, '')]"
    },
    "managedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "Managed Identity name"
      },
      "value": "[if(parameters('deployManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity'), '2025-04-01').outputs.name.value, '')]"
    },
    "managedIdentityId": {
      "type": "string",
      "metadata": {
        "description": "Managed Identity ID"
      },
      "value": "[if(parameters('deployManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity'), '2025-04-01').outputs.id.value, '')]"
    },
    "managedIdentityPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "Managed Identity Principal ID"
      },
      "value": "[if(parameters('deployManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity'), '2025-04-01').outputs.principalId.value, '')]"
    },
    "managedIdentityClientId": {
      "type": "string",
      "metadata": {
        "description": "Managed Identity Client ID"
      },
      "value": "[if(parameters('deployManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'managedIdentity'), '2025-04-01').outputs.clientId.value, '')]"
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network name"
      },
      "value": "[if(parameters('deployVirtualNetwork'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2025-04-01').outputs.name.value, '')]"
    },
    "virtualNetworkId": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network ID"
      },
      "value": "[if(parameters('deployVirtualNetwork'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2025-04-01').outputs.id.value, '')]"
    },
    "subnetIds": {
      "type": "array",
      "metadata": {
        "description": "Subnet IDs"
      },
      "value": "[if(parameters('deployVirtualNetwork'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2025-04-01').outputs.subnetIds.value, createArray())]"
    },
    "subnetNames": {
      "type": "array",
      "metadata": {
        "description": "Subnet names"
      },
      "value": "[if(parameters('deployVirtualNetwork'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2025-04-01').outputs.subnetNames.value, createArray())]"
    },
    "natGatewayName": {
      "type": "string",
      "metadata": {
        "description": "NAT Gateway name"
      },
      "value": "[if(parameters('deployNatGateway'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'natGateway'), '2025-04-01').outputs.name.value, '')]"
    },
    "natGatewayId": {
      "type": "string",
      "metadata": {
        "description": "NAT Gateway ID"
      },
      "value": "[if(parameters('deployNatGateway'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'natGateway'), '2025-04-01').outputs.id.value, '')]"
    },
    "publicIpName": {
      "type": "string",
      "metadata": {
        "description": "Public IP name"
      },
      "value": "[if(parameters('deployNatGateway'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'publicIp'), '2025-04-01').outputs.name.value, '')]"
    },
    "publicIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Public IP address"
      },
      "value": "[if(parameters('deployNatGateway'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'publicIp'), '2025-04-01').outputs.ipAddress.value, '')]"
    },
    "applicationInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Application Insights name"
      },
      "value": "[if(parameters('deployApplicationInsights'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights'), '2025-04-01').outputs.name.value, '')]"
    },
    "applicationInsightsId": {
      "type": "string",
      "metadata": {
        "description": "Application Insights ID"
      },
      "value": "[if(parameters('deployApplicationInsights'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights'), '2025-04-01').outputs.id.value, '')]"
    },
    "applicationInsightsInstrumentationKey": {
      "type": "string",
      "metadata": {
        "description": "Application Insights instrumentation key"
      },
      "value": "[if(parameters('deployApplicationInsights'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights'), '2025-04-01').outputs.instrumentationKey.value, '')]"
    },
    "applicationInsightsConnectionString": {
      "type": "string",
      "metadata": {
        "description": "Application Insights connection string"
      },
      "value": "[if(parameters('deployApplicationInsights'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'applicationInsights'), '2025-04-01').outputs.connectionString.value, '')]"
    },
    "actionGroupName": {
      "type": "string",
      "metadata": {
        "description": "Action Group name"
      },
      "value": "[if(and(parameters('deployApplicationInsights'), greater(length(parameters('alertEmailReceivers')), 0)), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroup'), '2025-04-01').outputs.name.value, '')]"
    },
    "actionGroupId": {
      "type": "string",
      "metadata": {
        "description": "Action Group ID"
      },
      "value": "[if(and(parameters('deployApplicationInsights'), greater(length(parameters('alertEmailReceivers')), 0)), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'actionGroup'), '2025-04-01').outputs.id.value, '')]"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace name"
      },
      "value": "[if(parameters('deployLogAnalyticsWorkspace'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace'), '2025-04-01').outputs.name.value, '')]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace ID"
      },
      "value": "[if(parameters('deployLogAnalyticsWorkspace'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace'), '2025-04-01').outputs.id.value, '')]"
    },
    "logAnalyticsCustomerId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace customer ID"
      },
      "value": "[if(parameters('deployLogAnalyticsWorkspace'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'logAnalyticsWorkspace'), '2025-04-01').outputs.customerId.value, '')]"
    },
    "serviceBusName": {
      "type": "string",
      "metadata": {
        "description": "Service Bus Namespace name"
      },
      "value": "[if(parameters('deployServiceBus'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'serviceBus'), '2025-04-01').outputs.name.value, '')]"
    },
    "serviceBusId": {
      "type": "string",
      "metadata": {
        "description": "Service Bus Namespace ID"
      },
      "value": "[if(parameters('deployServiceBus'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'serviceBus'), '2025-04-01').outputs.id.value, '')]"
    },
    "serviceBusEndpoint": {
      "type": "string",
      "metadata": {
        "description": "Service Bus Namespace endpoint"
      },
      "value": "[if(parameters('deployServiceBus'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'serviceBus'), '2025-04-01').outputs.endpoint.value, '')]"
    },
    "storageTablesApiConnectionName": {
      "type": "string",
      "metadata": {
        "description": "Storage Tables API Connection name"
      },
      "value": "[if(and(parameters('deployApiConnections'), parameters('deployStorageAccount')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'storageTablesApiConnection'), '2025-04-01').outputs.name.value, '')]"
    },
    "storageTablesApiConnectionId": {
      "type": "string",
      "metadata": {
        "description": "Storage Tables API Connection ID"
      },
      "value": "[if(and(parameters('deployApiConnections'), parameters('deployStorageAccount')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'storageTablesApiConnection'), '2025-04-01').outputs.id.value, '')]"
    },
    "storageTablesApiConnectionStatus": {
      "type": "string",
      "metadata": {
        "description": "Storage Tables API Connection status"
      },
      "value": "[if(and(parameters('deployApiConnections'), parameters('deployStorageAccount')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', 'storageTablesApiConnection'), '2025-04-01').outputs.statusLink.value, '')]"
    }
  }
}